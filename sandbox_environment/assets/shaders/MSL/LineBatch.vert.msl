#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct CameraData
{
    float4x4 ViewProjectionMatrix;
};

struct type_StructuredBuffer_CameraData
{
    CameraData _m0[1];
};

struct LineData
{
    float2 Start;
    float2 End;
    float4 Color;
    float Thickness;
    float Fade;
    float Depth;
    uint CameraIndex;
};

struct type_StructuredBuffer_LineData
{
    LineData _m0[1];
};

constant float _48 = {};

constant spvUnsafeArray<uint, 6> _49 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float out_var_TEXCOORD1 [[user(locn1)]];
    float out_var_TEXCOORD2 [[user(locn2)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(const device type_StructuredBuffer_CameraData& CameraDataBuffer [[buffer(0)]], const device type_StructuredBuffer_LineData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _52 = gl_VertexIndex / 6u;
    float _69 = DataBuffer._m0[_52].Thickness * 0.5;
    float2 _72 = fast::normalize(cross(float3(DataBuffer._m0[_52].End - DataBuffer._m0[_52].Start, 0.0), float3(0.0, 0.0, 1.0)).xy);
    float _98;
    float4 _99;
    switch (_49[gl_VertexIndex % 6u])
    {
        case 0u:
        {
            _98 = 1.0;
            _99 = float4(DataBuffer._m0[_52].Start + (_72 * _69), DataBuffer._m0[_52].Depth, 1.0);
            break;
        }
        case 1u:
        {
            _98 = 1.0;
            _99 = float4(DataBuffer._m0[_52].End + (_72 * _69), DataBuffer._m0[_52].Depth, 1.0);
            break;
        }
        case 2u:
        {
            _98 = -1.0;
            _99 = float4(DataBuffer._m0[_52].Start - (_72 * _69), DataBuffer._m0[_52].Depth, 1.0);
            break;
        }
        case 3u:
        {
            _98 = -1.0;
            _99 = float4(DataBuffer._m0[_52].End - (_72 * _69), DataBuffer._m0[_52].Depth, 1.0);
            break;
        }
        default:
        {
            _98 = _48;
            _99 = float4(0.0);
            break;
        }
    }
    float4 _102 = CameraDataBuffer._m0[DataBuffer._m0[_52].CameraIndex].ViewProjectionMatrix * _99;
    _102.z = _99.z;
    out.gl_Position = _102;
    out.out_var_TEXCOORD0 = DataBuffer._m0[_52].Color;
    out.out_var_TEXCOORD1 = _98;
    out.out_var_TEXCOORD2 = DataBuffer._m0[_52].Fade;
    return out;
}

