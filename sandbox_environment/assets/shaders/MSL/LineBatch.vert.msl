#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct type_FrameMatrices
{
    float4x4 ViewProjectionMatrix;
};

struct LineData
{
    float2 Start;
    float2 End;
    float4 Color;
    float Thickness;
    float Fade;
    float Depth;
    float pad;
};

struct type_StructuredBuffer_LineData
{
    LineData _m0[1];
};

constant float _45 = {};

constant spvUnsafeArray<uint, 6> _46 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float out_var_TEXCOORD1 [[user(locn1)]];
    float out_var_TEXCOORD2 [[user(locn2)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_FrameMatrices& FrameMatrices [[buffer(0)]], const device type_StructuredBuffer_LineData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _54 = gl_VertexIndex / 6u;
    float _74 = DataBuffer._m0[_54].Thickness * 0.5;
    float2 _77 = fast::normalize(cross(float3(DataBuffer._m0[_54].End - DataBuffer._m0[_54].Start, 0.0), float3(0.0, 0.0, 1.0)).xy);
    float _103;
    float4 _104;
    switch (_46[gl_VertexIndex % 6u])
    {
        case 0u:
        {
            _103 = 1.0;
            _104 = float4(DataBuffer._m0[_54].Start + (_77 * _74), DataBuffer._m0[_54].Depth, 1.0);
            break;
        }
        case 1u:
        {
            _103 = 1.0;
            _104 = float4(DataBuffer._m0[_54].End + (_77 * _74), DataBuffer._m0[_54].Depth, 1.0);
            break;
        }
        case 2u:
        {
            _103 = -1.0;
            _104 = float4(DataBuffer._m0[_54].Start - (_77 * _74), DataBuffer._m0[_54].Depth, 1.0);
            break;
        }
        case 3u:
        {
            _103 = -1.0;
            _104 = float4(DataBuffer._m0[_54].End - (_77 * _74), DataBuffer._m0[_54].Depth, 1.0);
            break;
        }
        default:
        {
            _103 = _45;
            _104 = float4(0.0);
            break;
        }
    }
    float4 _107 = FrameMatrices.ViewProjectionMatrix * _104;
    _107.z = _104.z;
    out.gl_Position = _107;
    out.out_var_TEXCOORD0 = DataBuffer._m0[_54].Color;
    out.out_var_TEXCOORD1 = _103;
    out.out_var_TEXCOORD2 = DataBuffer._m0[_54].Fade;
    return out;
}

