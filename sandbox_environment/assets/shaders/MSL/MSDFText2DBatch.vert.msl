#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct CameraData
{
    float4x4 ViewProjectionMatrix;
};

struct type_StructuredBuffer_CameraData
{
    CameraData _m0[1];
};

struct MSDFSpriteData
{
    float2 Position;
    float2 Size;
    float4 SourceRect;
    float4 ForegroundColor;
    float Depth;
    uint CameraIndex;
    float2 pad;
};

struct type_StructuredBuffer_MSDFSpriteData
{
    MSDFSpriteData _m0[1];
};

constant spvUnsafeArray<uint, 6> _45 = spvUnsafeArray<uint, 6>({ 0u, 1u, 2u, 3u, 2u, 1u });
constant spvUnsafeArray<float2, 4> _50 = spvUnsafeArray<float2, 4>({ float2(0.0), float2(1.0, 0.0), float2(0.0, 1.0), float2(1.0) });

struct main0_out
{
    float2 out_var_TEXCOORD0 [[user(locn0)]];
    float4 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(const device type_StructuredBuffer_CameraData& CameraDataBuffer [[buffer(0)]], const device type_StructuredBuffer_MSDFSpriteData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _59 = gl_VertexIndex / 6u;
    uint _60 = gl_VertexIndex % 6u;
    spvUnsafeArray<float2, 4> _90 = spvUnsafeArray<float2, 4>({ float2(DataBuffer._m0[_59].SourceRect.xy), float2(DataBuffer._m0[_59].SourceRect.zy), float2(DataBuffer._m0[_59].SourceRect.xw), float2(DataBuffer._m0[_59].SourceRect.zw) });
    spvUnsafeArray<float2, 4> _57 = _90;
    float4 _93 = CameraDataBuffer._m0[DataBuffer._m0[_59].CameraIndex].ViewProjectionMatrix * float4((_50[_45[_60]] * DataBuffer._m0[_59].Size) + DataBuffer._m0[_59].Position, DataBuffer._m0[_59].Depth, 1.0);
    _93.z = DataBuffer._m0[_59].Depth;
    out.out_var_TEXCOORD0 = _57[_45[_60]];
    out.out_var_TEXCOORD1 = DataBuffer._m0[_59].ForegroundColor;
    out.gl_Position = _93;
    return out;
}

